from aiogram.dispatcher.filters import CommandStart, Command
from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from create import Form
from create import dp, bot, Form
from hand.actions import select_key, add_key, check_free_key_claimed
import requests
from datetime import datetime, timedelta
from payment import create_payment, check_payment_status, grant_access

# from main import YOOMONEY_PAYMENT_URL
from aiogram import types
import requests
from config import config
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode, Message
import aiomysql
import sqlite3
from hand.actions import add_key

dp.middleware.setup(LoggingMiddleware())
chat_context = {}
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start


# URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –≤ YooMoney
YOOMONEY_PAYMENT_URL = 'https://api.yookassa.ru/v3/payments'


# @dp.message_handler(commands=['start'])


async def handle_start(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"
   # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    ref_button = types.InlineKeyboardButton(
        '–ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –¥—Ä—É–≥—É', switch_inline_query='')
    buy_free_button = types.InlineKeyboardButton(
        'üÜì –ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ', callback_data='buy_free')
    buy_button = types.InlineKeyboardButton(
        'üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø', callback_data='buy')
    help_button = types.InlineKeyboardButton('‚ùì –ü–æ–º–æ—â—å', callback_data='help')

    markup.add(ref_button, buy_free_button, buy_button, help_button)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"
    await message.answer("–ü—Ä–∏–≤–µ—Ç! \n<b>VELES VPN - –±—ã—Å—Ç—Ä—ã–π VPN üöÄ</b>, –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫, 99–† –≤ –º–µ—Å—è—Ü.\n–ï–≥–æ –º–æ–∂–Ω–æ –≤–æ–æ–±—â–µ –Ω–µ –≤—ã–∫–ª—é—á–∞—Ç—å –≤ –Ω–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–∞–∂–µ –±–∞–Ω–∫–∏ –∏ –∫–æ–Ω–µ—á–Ω–æ —Å–æ—Ü. —Å–µ—Ç–∏.\n \n–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—É–ø–µ—Ä –ø—Ä–æ—Å—Ç–æ.. 2 –∫–ª–∏–∫–∞. –ù–∞–∂–º–∏ 'üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø' –æ–ø–ª–∞—Ç–∏ –∏ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç –≤—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n \n–ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ 3 –¥–Ω—è - –Ω–∞–∂–º–∏ 'üéÅ –ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ'.", reply_markup=markup)
    await state.finish()
    chat_context[message.chat.id] = 'start'


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"


# @dp.callback_query_handler(lambda query: query.data == 'buy')
async def handle_buy_button(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞
    chat_context[chat_id] = 'start_menu'
    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    month_button = types.InlineKeyboardButton(
        'üóìÔ∏è 1 –º–µ—Å—è—Ü - 99‚ÇΩ', callback_data='period_30')
    three_months_button = types.InlineKeyboardButton(
        'üóìÔ∏è 3 –º–µ—Å—è—Ü–∞ - 250‚ÇΩ', callback_data='period_90')
    year_button = types.InlineKeyboardButton(
        'üóìÔ∏è 1 –≥–æ–¥ - 999‚ÇΩ', callback_data='period_365')
    back_button = types.InlineKeyboardButton(
        'üîô –ù–∞–∑–∞–¥', callback_data='back')
    help_button = types.InlineKeyboardButton(
        '‚ùì –ü–æ–º–æ—â—å', callback_data='help')
    markup.add(month_button, three_months_button,
               year_button, back_button, help_button)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    # —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä–∞–ª–∏–∑—É–µ—Ç –±–æ—Ç–∞ —Ç–∞–∫ –∫–∞–∫ –∂–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑ –∑–∞ –Ω–µ–µ, –µ—Å–ª–∏ –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ –Ω–æ—Ä–º. –ù–æ –æ–Ω–∞ –Ω—É–∂–Ω–∞ –ø–æ —Ö–æ–¥—É
    # await Form.waiting_for_period.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ"


# @dp.callback_query_handler(lambda query: query.data == 'buy_free')
async def handle_buy_free_button(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞
    chat_context[chat_id] = 'start_menu'
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    get_key_button = types.InlineKeyboardButton(
        '1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', callback_data='get_key')
    download_android_button = types.InlineKeyboardButton(
        '2Ô∏è‚É£ –°–∫–∞—á–∞—Ç—å –¥–ª—è ANDROID', callback_data='download_android')
    download_iphone_button = types.InlineKeyboardButton(
        '3Ô∏è‚É£ –°–∫–∞—á–∞—Ç—å –¥–ª—è IPHONE/MAC', callback_data='download_iphone')
    download_windows_button = types.InlineKeyboardButton(
        '4Ô∏è‚É£ –°–∫–∞—á–∞—Ç—å –¥–ª—è Windows', callback_data='download_windows')
    back_button = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')
    markup.add(get_key_button, download_android_button,
               download_iphone_button, download_windows_button, back_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer("–ü–æ–ø—Ä–æ–±—É–π 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–π–º–µ—Ç 1 –º–∏–Ω—É—Ç—É.", reply_markup=markup)


# —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏
async def handle_keyboard_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    chat_id = callback_query.message.chat.id

    if data == 'get_key':
        period = 3
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"
        user_id = callback_query.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not check_free_key_claimed(user_id):
            # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ, –≤—ã–¥–∞–µ–º –∫–ª—é—á
            key_free = select_key(user_id, period)
            if key_free:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –µ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                message = f'–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞: {key_free}'
                await bot.send_message(chat_id, message, reply_to_message_id=callback_query.message.message_id)
            else:
                await callback_query.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        else:
            await callback_query.answer('–í—ã —É–∂–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á —Ä–∞–Ω–µ–µ')

    elif data == 'download_android':
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å –¥–ª—è ANDROID"
        android_download_link = "https://play.google.com/store/apps/details?id=org.outline.android.client"
        await callback_query.answer('–û—Ç–∫—Ä—ã–≤–∞—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...')
        await bot.send_message(chat_id, f'–°–∫–∞—á–∞—Ç—å –¥–ª—è ANDROID: {android_download_link}')

    elif data == 'download_iphone':
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å –¥–ª—è IPHONE/MAC"
        iphone_mac_download_link = "https://apps.apple.com/ru/app/outline-app/id1356177741"
        await callback_query.answer('–û—Ç–∫—Ä—ã–≤–∞—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...')
        await bot.send_message(chat_id, f'–°–∫–∞—á–∞—Ç—å –¥–ª—è IPHONE/MAC: {iphone_mac_download_link}')

    elif data == 'download_windows':
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å –¥–ª—è Windows"
        windows_download_link = "https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe"
        await callback_query.answer('–û—Ç–∫—Ä—ã–≤–∞—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...')
        await bot.send_message(chat_id, f'–°–∫–∞—á–∞—Ç—å –¥–ª—è Windows: {windows_download_link}')

    elif data == 'back':
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        await handle_back_button(callback_query, state)

    else:
        # –í —Å–ª—É—á–∞–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É
        await callback_query.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞')


async def create_and_send_payment(callback_query: types.CallbackQuery, period: int, amount: int, description: str):
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    payment_id = create_payment(
        amount=amount, description=description, return_url="https://example.com/payment/success")
    if payment_id:
        payment_url = f"https://money.yoomoney.ru/eshop.xml?transaction_id={
            payment_id}"
        markup = types.InlineKeyboardMarkup(row_width=1)
        payment_button = types.InlineKeyboardButton(
            f'–û–ø–ª–∞—Ç–∏—Ç—å {amount / 100}‚ÇΩ', url=payment_url)
        back_button = types.InlineKeyboardButton(
            'üîô –ù–∞–∑–∞–¥', callback_data='back')
        markup.add(payment_button, back_button)
        await callback_query.message.answer("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)
    else:
        await callback_query.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
# @dp.callback_query_handler(lambda query: query.data.startswith('period'))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def handle_payment_success(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    payment_id = message.get_args().get('id')
    status = check_payment_status(payment_id)
    if status == 'succeeded':
        user_id = message.from_user.id
        period = 30  # –ü–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 30 –¥–Ω–µ–π
        select_key(user_id, period)
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

async def handle_subscription_period(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    period = int(callback_query.data.split('_')[1])

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    if period in [30, 90, 365]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        if period == 30:
            amount = 9900
            description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VELES VPN (1 –º–µ—Å—è—Ü)"
        elif period == 90:
            amount = 25000
            description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VELES VPN (3 –º–µ—Å—è—Ü–∞)"
        elif period == 365:
            amount = 99900
            description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VELES VPN (1 –≥–æ–¥)"
        await create_and_send_payment(callback_query, period, amount, description)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = callback_query.from_user.id
        key = select_key(user_id, period)
        if key:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª—é—á
            await callback_query.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ {period} –¥–Ω–µ–π! –í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞: {key}")
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–ª—é—á–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            # add_key(callback_query.from_user.id, period)
        else:
            await callback_query.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

    else:
        await callback_query.message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥')

    await state.finish()
    await callback_query.answer()  # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏


# @dp.callback_query_handler(lambda query: query.data == 'help')
async def handle_help_button(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞
    chat_context[chat_id] = 'start_menu'
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    markup = types.InlineKeyboardMarkup(row_width=1)
    help_options = ['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é', '–ù–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª—é—á', '–ü–ª–æ—Ö–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å', '–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π', '–î—Ä—É–≥–æ–µ']
    buttons = [types.InlineKeyboardButton(
        option, callback_data=option.lower()) for option in help_options]
    back = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')

    markup.add(*buttons, back)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:', reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å"
# @dp.callback_query_handler(lambda query: query.data in ['–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é', '–Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
    # '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª—é—á', '–ø–ª–æ—Ö–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å', '–ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π', '–¥—Ä—É–≥–æ–µ'])
async def handle_help_options(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback_query
    selected_option = callback_query.data.lower()

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if selected_option == '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é':
        await callback_query.message.answer('–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é...')
    elif selected_option == '–Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
        await callback_query.message.answer('–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...')
    elif selected_option == '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª—é—á':
        await callback_query.message.answer('–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª—é—á...')
    elif selected_option == '–ø–ª–æ—Ö–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å':
        await callback_query.message.answer('–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –µ—Å–ª–∏ –ø–ª–æ—Ö–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å...')
    elif selected_option == '–ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π':
        await callback_query.message.answer('–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π...')
    elif selected_option == '–¥—Ä—É–≥–æ–µ':
        await callback_query.message.answer('–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...')
    elif selected_option == 'üîô –ù–∞–∑–∞–¥':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é
        await handle_back_button(callback_query, state)
    else:
        await callback_query.message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å')

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
# @dp.callback_query_handler(lambda query: query.data == 'back')


async def handle_back_button(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
    previous_menu = chat_context.get(callback_query.message.chat.id)
    if previous_menu:
        if previous_menu == 'start_menu':
            await handle_start(callback_query.message, state)
        elif previous_menu == 'help_menu':
            await handle_help_button(callback_query, state)
        # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –º–µ–Ω—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    else:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await handle_start(callback_query.message, state)
    # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await callback_query.answer()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.finish()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –¥—Ä—É–≥—É"


# @dp.callback_query_handler(lambda query: query.data == 'recommend_to_friend')
async def recommend_to_friend(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –µ–≥–æ username
    bot_username = "VelesVPN_bot"
    bot_link = f"https://t.me/{bot_username}"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞
    await callback_query.message.answer(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞: {bot_link}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_key


async def handle_add_key_command(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id in config.tg_bot.admin_ids:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        await Form.waiting_for_new_key.set()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏


async def handle_new_key(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–ª—é—á –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    key = message.text
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_key(key)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    await state.finish()
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞
    await message.answer(f"–ö–ª—é—á '{key}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")


def register_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(
        handle_back_button, lambda query: query.data == 'back')
    dp.register_message_handler(handle_start, commands=['start'])
    dp.register_callback_query_handler(
        handle_buy_button, lambda query: query.data == 'buy')
    dp.register_callback_query_handler(
        handle_buy_free_button, lambda query: query.data == 'buy_free')
    dp.register_callback_query_handler(
        handle_subscription_period, lambda query: query.data.startswith('period'))
    dp.register_callback_query_handler(
        handle_help_button, lambda query: query.data == 'help')
    dp.register_callback_query_handler(handle_help_options, lambda query: query.data in [
        '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é', '–Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª—é—á', '–ø–ª–æ—Ö–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å', '–ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π', '–¥—Ä—É–≥–æ–µ'])
    dp.register_callback_query_handler(
        recommend_to_friend, lambda query: query.data == 'recommend_to_friend')
    dp.register_callback_query_handler(handle_keyboard_buttons)
    dp.register_message_handler(
        handle_add_key_command, Command("add_key"), state="*")
    dp.register_message_handler(handle_new_key, state=Form.waiting_for_new_key)
    dp.register_message_handler(handle_payment_success, state="*")
    dp.register_callback_query_handler(create_and_send_payment, lambda query: query.data.startswith('period'))
